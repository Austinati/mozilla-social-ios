// -*- mode: Swift -*-

// AUTOGENERATED BY glean_parser v8.1.1. DO NOT EDIT. DO NOT COMMIT.

#if canImport(Foundation)
    import Foundation
#endif

/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */


import Glean

// swiftlint:disable superfluous_disable_command
// swiftlint:disable nesting
// swiftlint:disable line_length
// swiftlint:disable identifier_name
// swiftlint:disable force_try

extension GleanMetrics {
    class GleanBuild {
        private init() {
            // Intentionally left private, no external user can instantiate a new global object.
        }

        public static let info = BuildInfo(buildDate: DateComponents(calendar: Calendar.current, timeZone: TimeZone(abbreviation: "UTC"), year: 2023, month: 11, day: 28, hour: 20, minute: 37, second: 48))
    }

    enum Identifiers {
        /// The Adjust device ID for this user, if available.
        static let adjustDeviceId = StringMetricType( // generated from identifiers.adjust_device_id
            CommonMetricData(
                category: "identifiers",
                name: "adjust_device_id",
                sendInPings: ["events"],
                lifetime: .user,
                disabled: false
            )
        )

        /// The user's FxA account ID, if available.
        static let fxaAccountId = StringMetricType( // generated from identifiers.fxa_account_id
            CommonMetricData(
                category: "identifiers",
                name: "fxa_account_id",
                sendInPings: ["events"],
                lifetime: .user,
                disabled: false
            )
        )

        /// The user's full account handle, with domain. For example,
        /// `account_name@mozilla.social`.
        static let mastodonAccountHandle = StringMetricType( // generated from identifiers.mastodon_account_handle
            CommonMetricData(
                category: "identifiers",
                name: "mastodon_account_handle",
                sendInPings: ["events"],
                lifetime: .user,
                disabled: false
            )
        )

        /// The user's numeric account ID from Mastodon.
        static let mastodonAccountId = StringMetricType( // generated from identifiers.mastodon_account_id
            CommonMetricData(
                category: "identifiers",
                name: "mastodon_account_id",
                sendInPings: ["events"],
                lifetime: .user,
                disabled: false
            )
        )

        /// The device user agent string.
        static let userAgent = StringMetricType( // generated from identifiers.user_agent
            CommonMetricData(
                category: "identifiers",
                name: "user_agent",
                sendInPings: ["events"],
                lifetime: .user,
                disabled: false
            )
        )

    }

    enum Ui {
        struct EngagementExtra: EventExtras {
            var engagementType: String?
            var engagementValue: String?
            var mastodonAccountHandle: String?
            var mastodonAccountId: String?
            var mastodonStatusId: String?
            var recommendationId: String?
            var uiAdditionalDetail: String?
            var uiIdentifier: String?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let engagementType = self.engagementType {
                    record["engagement_type"] = String(engagementType)
                }
                if let engagementValue = self.engagementValue {
                    record["engagement_value"] = String(engagementValue)
                }
                if let mastodonAccountHandle = self.mastodonAccountHandle {
                    record["mastodon_account_handle"] = String(mastodonAccountHandle)
                }
                if let mastodonAccountId = self.mastodonAccountId {
                    record["mastodon_account_id"] = String(mastodonAccountId)
                }
                if let mastodonStatusId = self.mastodonStatusId {
                    record["mastodon_status_id"] = String(mastodonStatusId)
                }
                if let recommendationId = self.recommendationId {
                    record["recommendation_id"] = String(recommendationId)
                }
                if let uiAdditionalDetail = self.uiAdditionalDetail {
                    record["ui_additional_detail"] = String(uiAdditionalDetail)
                }
                if let uiIdentifier = self.uiIdentifier {
                    record["ui_identifier"] = String(uiIdentifier)
                }

                return record
            }
        }

        struct ImpressionExtra: EventExtras {
            var mastodonAccountHandle: String?
            var mastodonAccountId: String?
            var mastodonStatusId: String?
            var recommendationId: String?
            var uiAdditionalDetail: String?
            var uiIdentifier: String?

            func toExtraRecord() -> [String: String] {
                var record = [String: String]()

                if let mastodonAccountHandle = self.mastodonAccountHandle {
                    record["mastodon_account_handle"] = String(mastodonAccountHandle)
                }
                if let mastodonAccountId = self.mastodonAccountId {
                    record["mastodon_account_id"] = String(mastodonAccountId)
                }
                if let mastodonStatusId = self.mastodonStatusId {
                    record["mastodon_status_id"] = String(mastodonStatusId)
                }
                if let recommendationId = self.recommendationId {
                    record["recommendation_id"] = String(recommendationId)
                }
                if let uiAdditionalDetail = self.uiAdditionalDetail {
                    record["ui_additional_detail"] = String(uiAdditionalDetail)
                }
                if let uiIdentifier = self.uiIdentifier {
                    record["ui_identifier"] = String(uiIdentifier)
                }

                return record
            }
        }

        /// Event triggered when a user taps/clicks on a UI element,  triggering a change
        /// in app state.
        static let engagement = EventMetricType<EngagementExtra>( // generated from ui.engagement
            CommonMetricData(
                category: "ui",
                name: "engagement",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , ["engagement_type", "engagement_value", "mastodon_account_handle", "mastodon_account_id", "mastodon_status_id", "recommendation_id", "ui_additional_detail", "ui_identifier"]
        )

        /// Event triggered when a user views a notable UI element. Triggered once per page
        /// load, as soon as any pixel of that UI  element is visible in the foreground for
        /// any length of time. UI elements may include: content, pages, CTAs, etc.
        static let impression = EventMetricType<ImpressionExtra>( // generated from ui.impression
            CommonMetricData(
                category: "ui",
                name: "impression",
                sendInPings: ["events"],
                lifetime: .ping,
                disabled: false
            )
            , ["mastodon_account_handle", "mastodon_account_id", "mastodon_status_id", "recommendation_id", "ui_additional_detail", "ui_identifier"]
        )

    }

}

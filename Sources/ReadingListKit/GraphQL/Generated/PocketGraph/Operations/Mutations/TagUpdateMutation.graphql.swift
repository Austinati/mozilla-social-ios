// @generated
// This file was automatically generated and should not be edited.

@_exported import ApolloAPI

extension PocketGraph {
  class TagUpdateMutation: GraphQLMutation {
    static let operationName: String = "TagUpdate"
    static let operationDocument: ApolloAPI.OperationDocument = .init(
      definition: .init(
        #"mutation TagUpdate($input: TagUpdateInput!) { updateTag(input: $input) { __typename ...TagParts } }"#,
        fragments: [TagParts.self]
      ))

    public var input: TagUpdateInput

    public init(input: TagUpdateInput) {
      self.input = input
    }

    public var __variables: Variables? { ["input": input] }

    struct Data: PocketGraph.SelectionSet {
      let __data: DataDict
      init(_dataDict: DataDict) { __data = _dataDict }

      static var __parentType: ApolloAPI.ParentType { PocketGraph.Objects.Mutation }
      static var __selections: [ApolloAPI.Selection] { [
        .field("updateTag", UpdateTag.self, arguments: ["input": .variable("input")]),
      ] }

      /// Updates a Tag (renames the tag), and returns the updated Tag.
      /// If a Tag with the updated name already exists in the database, will
      /// associate that Tag to all relevant SavedItems rather than creating
      /// a duplicate Tag object.
      var updateTag: UpdateTag { __data["updateTag"] }

      /// UpdateTag
      ///
      /// Parent Type: `Tag`
      struct UpdateTag: PocketGraph.SelectionSet {
        let __data: DataDict
        init(_dataDict: DataDict) { __data = _dataDict }

        static var __parentType: ApolloAPI.ParentType { PocketGraph.Objects.Tag }
        static var __selections: [ApolloAPI.Selection] { [
          .field("__typename", String.self),
          .fragment(TagParts.self),
        ] }

        /// The actual tag string the user created for their list
        var name: String { __data["name"] }
        /// Surrogate primary key. This is usually generated by clients, but will be generated by the server if not passed through creation
        var id: PocketGraph.ID { __data["id"] }

        struct Fragments: FragmentContainer {
          let __data: DataDict
          init(_dataDict: DataDict) { __data = _dataDict }

          var tagParts: TagParts { _toFragment() }
        }
      }
    }
  }

}
// @generated
// This file was automatically generated and should not be edited.

@_exported import ApolloAPI

extension PocketGraph {
  class TagsQuery: GraphQLQuery {
    static let operationName: String = "Tags"
    static let operationDocument: ApolloAPI.OperationDocument = .init(
      definition: .init(
        #"query Tags($pagination: PaginationInput) { user { __typename tags(pagination: $pagination) { __typename edges { __typename node { __typename ...TagParts } cursor } pageInfo { __typename endCursor hasNextPage hasPreviousPage startCursor } totalCount } } }"#,
        fragments: [TagParts.self]
      ))

    public var pagination: GraphQLNullable<PaginationInput>

    public init(pagination: GraphQLNullable<PaginationInput>) {
      self.pagination = pagination
    }

    public var __variables: Variables? { ["pagination": pagination] }

    struct Data: PocketGraph.SelectionSet {
      let __data: DataDict
      init(_dataDict: DataDict) { __data = _dataDict }

      static var __parentType: ApolloAPI.ParentType { PocketGraph.Objects.Query }
      static var __selections: [ApolloAPI.Selection] { [
        .field("user", User?.self),
      ] }

      /// Get a user entity for an authenticated client
      var user: User? { __data["user"] }

      /// User
      ///
      /// Parent Type: `User`
      struct User: PocketGraph.SelectionSet {
        let __data: DataDict
        init(_dataDict: DataDict) { __data = _dataDict }

        static var __parentType: ApolloAPI.ParentType { PocketGraph.Objects.User }
        static var __selections: [ApolloAPI.Selection] { [
          .field("__typename", String.self),
          .field("tags", Tags?.self, arguments: ["pagination": .variable("pagination")]),
        ] }

        /// Get a paginated listing of all a user's Tags
        var tags: Tags? { __data["tags"] }

        /// User.Tags
        ///
        /// Parent Type: `TagConnection`
        struct Tags: PocketGraph.SelectionSet {
          let __data: DataDict
          init(_dataDict: DataDict) { __data = _dataDict }

          static var __parentType: ApolloAPI.ParentType { PocketGraph.Objects.TagConnection }
          static var __selections: [ApolloAPI.Selection] { [
            .field("__typename", String.self),
            .field("edges", [Edge?]?.self),
            .field("pageInfo", PageInfo.self),
            .field("totalCount", Int.self),
          ] }

          /// A list of edges.
          var edges: [Edge?]? { __data["edges"] }
          /// Information to aid in pagination.
          var pageInfo: PageInfo { __data["pageInfo"] }
          /// Identifies the total count of Tags in the connection.
          var totalCount: Int { __data["totalCount"] }

          /// User.Tags.Edge
          ///
          /// Parent Type: `TagEdge`
          struct Edge: PocketGraph.SelectionSet {
            let __data: DataDict
            init(_dataDict: DataDict) { __data = _dataDict }

            static var __parentType: ApolloAPI.ParentType { PocketGraph.Objects.TagEdge }
            static var __selections: [ApolloAPI.Selection] { [
              .field("__typename", String.self),
              .field("node", Node?.self),
              .field("cursor", String.self),
            ] }

            /// The Tag at the end of the edge.
            var node: Node? { __data["node"] }
            /// A cursor for use in pagination.
            var cursor: String { __data["cursor"] }

            /// User.Tags.Edge.Node
            ///
            /// Parent Type: `Tag`
            struct Node: PocketGraph.SelectionSet {
              let __data: DataDict
              init(_dataDict: DataDict) { __data = _dataDict }

              static var __parentType: ApolloAPI.ParentType { PocketGraph.Objects.Tag }
              static var __selections: [ApolloAPI.Selection] { [
                .field("__typename", String.self),
                .fragment(TagParts.self),
              ] }

              /// The actual tag string the user created for their list
              var name: String { __data["name"] }
              /// Surrogate primary key. This is usually generated by clients, but will be generated by the server if not passed through creation
              var id: PocketGraph.ID { __data["id"] }

              struct Fragments: FragmentContainer {
                let __data: DataDict
                init(_dataDict: DataDict) { __data = _dataDict }

                var tagParts: TagParts { _toFragment() }
              }
            }
          }

          /// User.Tags.PageInfo
          ///
          /// Parent Type: `PageInfo`
          struct PageInfo: PocketGraph.SelectionSet {
            let __data: DataDict
            init(_dataDict: DataDict) { __data = _dataDict }

            static var __parentType: ApolloAPI.ParentType { PocketGraph.Objects.PageInfo }
            static var __selections: [ApolloAPI.Selection] { [
              .field("__typename", String.self),
              .field("endCursor", String?.self),
              .field("hasNextPage", Bool.self),
              .field("hasPreviousPage", Bool.self),
              .field("startCursor", String?.self),
            ] }

            /// When paginating forwards, the cursor to continue.
            var endCursor: String? { __data["endCursor"] }
            /// When paginating forwards, are there more items?
            var hasNextPage: Bool { __data["hasNextPage"] }
            /// When paginating backwards, are there more items?
            var hasPreviousPage: Bool { __data["hasPreviousPage"] }
            /// When paginating backwards, the cursor to continue.
            var startCursor: String? { __data["startCursor"] }
          }
        }
      }
    }
  }

}
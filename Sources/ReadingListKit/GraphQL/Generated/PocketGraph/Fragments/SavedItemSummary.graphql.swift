// @generated
// This file was automatically generated and should not be edited.

@_exported import ApolloAPI

extension PocketGraph {
  struct SavedItemSummary: PocketGraph.SelectionSet, Fragment {
    static var fragmentDefinition: StaticString {
      #"fragment SavedItemSummary on SavedItem { __typename url remoteID: id isArchived isFavorite _deletedAt _createdAt archivedAt tags { __typename ...TagParts } item { __typename ...ItemSummary ...PendingItemParts } corpusItem { __typename ...CorpusItemParts } }"#
    }

    let __data: DataDict
    init(_dataDict: DataDict) { __data = _dataDict }

    static var __parentType: ApolloAPI.ParentType { PocketGraph.Objects.SavedItem }
    static var __selections: [ApolloAPI.Selection] { [
      .field("__typename", String.self),
      .field("url", String.self),
      .field("id", alias: "remoteID", PocketGraph.ID.self),
      .field("isArchived", Bool.self),
      .field("isFavorite", Bool.self),
      .field("_deletedAt", Int?.self),
      .field("_createdAt", Int.self),
      .field("archivedAt", Int?.self),
      .field("tags", [Tag]?.self),
      .field("item", Item.self),
      .field("corpusItem", CorpusItem?.self),
    ] }

    /// The url the user saved to their list
    var url: String { __data["url"] }
    /// Surrogate primary key. This is usually generated by clients, but will be generated by the server if not passed through creation
    var remoteID: PocketGraph.ID { __data["remoteID"] }
    /// Helper property to indicate if the SavedItem is archived
    var isArchived: Bool { __data["isArchived"] }
    /// Helper property to indicate if the SavedItem is favorited
    var isFavorite: Bool { __data["isFavorite"] }
    /// Unix timestamp of when the entity was deleted, 30 days after this date this entity will be HARD deleted from the database and no longer exist
    var _deletedAt: Int? { __data["_deletedAt"] }
    /// Unix timestamp of when the entity was created
    var _createdAt: Int { __data["_createdAt"] }
    /// Timestamp that the SavedItem became archied, null if not archived
    var archivedAt: Int? { __data["archivedAt"] }
    /// The Tags associated with this SavedItem
    var tags: [Tag]? { __data["tags"] }
    /// Link to the underlying Pocket Item for the URL
    var item: Item { __data["item"] }
    /// If the item is in corpus allow the saved item to reference it.  Exposing curated info for consistent UX
    var corpusItem: CorpusItem? { __data["corpusItem"] }

    init(
      url: String,
      remoteID: PocketGraph.ID,
      isArchived: Bool,
      isFavorite: Bool,
      _deletedAt: Int? = nil,
      _createdAt: Int,
      archivedAt: Int? = nil,
      tags: [Tag]? = nil,
      item: Item,
      corpusItem: CorpusItem? = nil
    ) {
      self.init(_dataDict: DataDict(
        data: [
          "__typename": PocketGraph.Objects.SavedItem.typename,
          "url": url,
          "remoteID": remoteID,
          "isArchived": isArchived,
          "isFavorite": isFavorite,
          "_deletedAt": _deletedAt,
          "_createdAt": _createdAt,
          "archivedAt": archivedAt,
          "tags": tags._fieldData,
          "item": item._fieldData,
          "corpusItem": corpusItem._fieldData,
        ],
        fulfilledFragments: [
          ObjectIdentifier(SavedItemSummary.self)
        ]
      ))
    }

    /// Tag
    ///
    /// Parent Type: `Tag`
    struct Tag: PocketGraph.SelectionSet {
      let __data: DataDict
      init(_dataDict: DataDict) { __data = _dataDict }

      static var __parentType: ApolloAPI.ParentType { PocketGraph.Objects.Tag }
      static var __selections: [ApolloAPI.Selection] { [
        .field("__typename", String.self),
        .fragment(TagParts.self),
      ] }

      /// The actual tag string the user created for their list
      var name: String { __data["name"] }
      /// Surrogate primary key. This is usually generated by clients, but will be generated by the server if not passed through creation
      var id: PocketGraph.ID { __data["id"] }

      struct Fragments: FragmentContainer {
        let __data: DataDict
        init(_dataDict: DataDict) { __data = _dataDict }

        var tagParts: TagParts { _toFragment() }
      }

      init(
        name: String,
        id: PocketGraph.ID
      ) {
        self.init(_dataDict: DataDict(
          data: [
            "__typename": PocketGraph.Objects.Tag.typename,
            "name": name,
            "id": id,
          ],
          fulfilledFragments: [
            ObjectIdentifier(SavedItemSummary.Tag.self),
            ObjectIdentifier(TagParts.self)
          ]
        ))
      }
    }

    /// Item
    ///
    /// Parent Type: `ItemResult`
    struct Item: PocketGraph.SelectionSet {
      let __data: DataDict
      init(_dataDict: DataDict) { __data = _dataDict }

      static var __parentType: ApolloAPI.ParentType { PocketGraph.Unions.ItemResult }
      static var __selections: [ApolloAPI.Selection] { [
        .field("__typename", String.self),
        .inlineFragment(AsItem.self),
        .inlineFragment(AsPendingItem.self),
      ] }

      var asItem: AsItem? { _asInlineFragment() }
      var asPendingItem: AsPendingItem? { _asInlineFragment() }

      init(
        __typename: String
      ) {
        self.init(_dataDict: DataDict(
          data: [
            "__typename": __typename,
          ],
          fulfilledFragments: [
            ObjectIdentifier(SavedItemSummary.Item.self)
          ]
        ))
      }

      /// Item.AsItem
      ///
      /// Parent Type: `Item`
      struct AsItem: PocketGraph.InlineFragment {
        let __data: DataDict
        init(_dataDict: DataDict) { __data = _dataDict }

        typealias RootEntityType = SavedItemSummary.Item
        static var __parentType: ApolloAPI.ParentType { PocketGraph.Objects.Item }
        static var __selections: [ApolloAPI.Selection] { [
          .fragment(ItemSummary.self),
        ] }

        /// The Item entity is owned by the Parser service.
        /// We only extend it in this service to make this service's schema valid.
        /// The key for this entity is the 'itemId'
        var remoteID: String { __data["remoteID"] }
        /// key field to identify the Item entity in the Parser service
        var givenUrl: PocketGraph.Url { __data["givenUrl"] }
        /// If the givenUrl redirects (once or many times), this is the final url. Otherwise, same as givenUrl
        var resolvedUrl: PocketGraph.Url? { __data["resolvedUrl"] }
        /// The title as determined by the parser.
        var title: String? { __data["title"] }
        /// The detected language of the article
        var language: String? { __data["language"] }
        /// The page's / publisher's preferred thumbnail image
        @available(*, deprecated, message: "use the topImage object")
        var topImageUrl: PocketGraph.Url? { __data["topImageUrl"] }
        /// How long it will take to read the article (TODO in what time unit? and by what calculation?)
        var timeToRead: Int? { __data["timeToRead"] }
        /// The domain, such as 'getpocket.com' of the resolved_url
        var domain: String? { __data["domain"] }
        /// The date the article was published
        var datePublished: PocketGraph.DateString? { __data["datePublished"] }
        /// true if the item is an article
        var isArticle: Bool? { __data["isArticle"] }
        /// 0=no images, 1=contains images, 2=is an image
        var hasImage: GraphQLEnum<PocketGraph.Imageness>? { __data["hasImage"] }
        /// 0=no videos, 1=contains video, 2=is a video
        var hasVideo: GraphQLEnum<PocketGraph.Videoness>? { __data["hasVideo"] }
        /// Number of words in the article
        var wordCount: Int? { __data["wordCount"] }
        /// List of Authors involved with this article
        var authors: [ItemSummary.Author?]? { __data["authors"] }
        /// A snippet of text from the article
        var excerpt: String? { __data["excerpt"] }
        /// Additional information about the item domain, when present, use this for displaying the domain name
        var domainMetadata: DomainMetadata? { __data["domainMetadata"] }
        /// Array of images within an article
        var images: [ItemSummary.Image?]? { __data["images"] }
        /// If the item has a syndicated counterpart the syndication information
        var syndicatedArticle: SyndicatedArticle? { __data["syndicatedArticle"] }

        struct Fragments: FragmentContainer {
          let __data: DataDict
          init(_dataDict: DataDict) { __data = _dataDict }

          var itemSummary: ItemSummary { _toFragment() }
        }

        init(
          remoteID: String,
          givenUrl: PocketGraph.Url,
          resolvedUrl: PocketGraph.Url? = nil,
          title: String? = nil,
          language: String? = nil,
          topImageUrl: PocketGraph.Url? = nil,
          timeToRead: Int? = nil,
          domain: String? = nil,
          datePublished: PocketGraph.DateString? = nil,
          isArticle: Bool? = nil,
          hasImage: GraphQLEnum<PocketGraph.Imageness>? = nil,
          hasVideo: GraphQLEnum<PocketGraph.Videoness>? = nil,
          wordCount: Int? = nil,
          authors: [ItemSummary.Author?]? = nil,
          excerpt: String? = nil,
          domainMetadata: DomainMetadata? = nil,
          images: [ItemSummary.Image?]? = nil,
          syndicatedArticle: SyndicatedArticle? = nil
        ) {
          self.init(_dataDict: DataDict(
            data: [
              "__typename": PocketGraph.Objects.Item.typename,
              "remoteID": remoteID,
              "givenUrl": givenUrl,
              "resolvedUrl": resolvedUrl,
              "title": title,
              "language": language,
              "topImageUrl": topImageUrl,
              "timeToRead": timeToRead,
              "domain": domain,
              "datePublished": datePublished,
              "isArticle": isArticle,
              "hasImage": hasImage,
              "hasVideo": hasVideo,
              "wordCount": wordCount,
              "authors": authors._fieldData,
              "excerpt": excerpt,
              "domainMetadata": domainMetadata._fieldData,
              "images": images._fieldData,
              "syndicatedArticle": syndicatedArticle._fieldData,
            ],
            fulfilledFragments: [
              ObjectIdentifier(SavedItemSummary.Item.self),
              ObjectIdentifier(SavedItemSummary.Item.AsItem.self),
              ObjectIdentifier(ItemSummary.self)
            ]
          ))
        }

        /// Item.AsItem.DomainMetadata
        ///
        /// Parent Type: `DomainMetadata`
        struct DomainMetadata: PocketGraph.SelectionSet {
          let __data: DataDict
          init(_dataDict: DataDict) { __data = _dataDict }

          static var __parentType: ApolloAPI.ParentType { PocketGraph.Objects.DomainMetadata }

          /// The name of the domain (e.g., The New York Times)
          var name: String? { __data["name"] }
          /// Url for the logo image
          var logo: PocketGraph.Url? { __data["logo"] }

          struct Fragments: FragmentContainer {
            let __data: DataDict
            init(_dataDict: DataDict) { __data = _dataDict }

            var domainMetadataParts: DomainMetadataParts { _toFragment() }
          }

          init(
            name: String? = nil,
            logo: PocketGraph.Url? = nil
          ) {
            self.init(_dataDict: DataDict(
              data: [
                "__typename": PocketGraph.Objects.DomainMetadata.typename,
                "name": name,
                "logo": logo,
              ],
              fulfilledFragments: [
                ObjectIdentifier(SavedItemSummary.Item.AsItem.DomainMetadata.self),
                ObjectIdentifier(DomainMetadataParts.self),
                ObjectIdentifier(ItemSummary.DomainMetadata.self)
              ]
            ))
          }
        }

        /// Item.AsItem.SyndicatedArticle
        ///
        /// Parent Type: `SyndicatedArticle`
        struct SyndicatedArticle: PocketGraph.SelectionSet {
          let __data: DataDict
          init(_dataDict: DataDict) { __data = _dataDict }

          static var __parentType: ApolloAPI.ParentType { PocketGraph.Objects.SyndicatedArticle }

          /// The item id of this Syndicated Article
          var itemId: PocketGraph.ID? { __data["itemId"] }
          /// Primary image to use in surfacing this content
          var mainImage: String? { __data["mainImage"] }
          /// Title of syndicated article
          var title: String { __data["title"] }
          /// Excerpt 
          var excerpt: String? { __data["excerpt"] }
          /// The manually set publisher information for this article
          var publisher: SyndicatedArticleParts.Publisher? { __data["publisher"] }

          struct Fragments: FragmentContainer {
            let __data: DataDict
            init(_dataDict: DataDict) { __data = _dataDict }

            var syndicatedArticleParts: SyndicatedArticleParts { _toFragment() }
          }

          init(
            itemId: PocketGraph.ID? = nil,
            mainImage: String? = nil,
            title: String,
            excerpt: String? = nil,
            publisher: SyndicatedArticleParts.Publisher? = nil
          ) {
            self.init(_dataDict: DataDict(
              data: [
                "__typename": PocketGraph.Objects.SyndicatedArticle.typename,
                "itemId": itemId,
                "mainImage": mainImage,
                "title": title,
                "excerpt": excerpt,
                "publisher": publisher._fieldData,
              ],
              fulfilledFragments: [
                ObjectIdentifier(SavedItemSummary.Item.AsItem.SyndicatedArticle.self),
                ObjectIdentifier(SyndicatedArticleParts.self),
                ObjectIdentifier(ItemSummary.SyndicatedArticle.self)
              ]
            ))
          }
        }
      }

      /// Item.AsPendingItem
      ///
      /// Parent Type: `PendingItem`
      struct AsPendingItem: PocketGraph.InlineFragment {
        let __data: DataDict
        init(_dataDict: DataDict) { __data = _dataDict }

        typealias RootEntityType = SavedItemSummary.Item
        static var __parentType: ApolloAPI.ParentType { PocketGraph.Objects.PendingItem }
        static var __selections: [ApolloAPI.Selection] { [
          .fragment(PendingItemParts.self),
        ] }

        /// URL of the item that the user gave for the SavedItem
        /// that is pending processing by parser
        var remoteID: String { __data["remoteID"] }
        var givenUrl: PocketGraph.Url { __data["givenUrl"] }
        var status: GraphQLEnum<PocketGraph.PendingItemStatus>? { __data["status"] }

        struct Fragments: FragmentContainer {
          let __data: DataDict
          init(_dataDict: DataDict) { __data = _dataDict }

          var pendingItemParts: PendingItemParts { _toFragment() }
        }

        init(
          remoteID: String,
          givenUrl: PocketGraph.Url,
          status: GraphQLEnum<PocketGraph.PendingItemStatus>? = nil
        ) {
          self.init(_dataDict: DataDict(
            data: [
              "__typename": PocketGraph.Objects.PendingItem.typename,
              "remoteID": remoteID,
              "givenUrl": givenUrl,
              "status": status,
            ],
            fulfilledFragments: [
              ObjectIdentifier(SavedItemSummary.Item.self),
              ObjectIdentifier(SavedItemSummary.Item.AsPendingItem.self),
              ObjectIdentifier(PendingItemParts.self)
            ]
          ))
        }
      }
    }

    /// CorpusItem
    ///
    /// Parent Type: `CorpusItem`
    struct CorpusItem: PocketGraph.SelectionSet {
      let __data: DataDict
      init(_dataDict: DataDict) { __data = _dataDict }

      static var __parentType: ApolloAPI.ParentType { PocketGraph.Objects.CorpusItem }
      static var __selections: [ApolloAPI.Selection] { [
        .field("__typename", String.self),
        .fragment(CorpusItemParts.self),
      ] }

      /// The GUID that is stored on an approved corpus item
      var id: PocketGraph.ID { __data["id"] }
      /// The URL of the Approved Item.
      var url: PocketGraph.Url { __data["url"] }
      /// The title of the Approved Item.
      var title: String { __data["title"] }
      /// The excerpt of the Approved Item.
      var excerpt: String { __data["excerpt"] }
      /// The image URL for this item's accompanying picture.
      var imageUrl: PocketGraph.Url { __data["imageUrl"] }
      /// The name of the online publication that published this story.
      var publisher: String { __data["publisher"] }
      /// If the Corpus Item is pocket owned with a specific type, this is the associated object (Collection or SyndicatedArticle).
      var target: Target? { __data["target"] }

      struct Fragments: FragmentContainer {
        let __data: DataDict
        init(_dataDict: DataDict) { __data = _dataDict }

        var corpusItemParts: CorpusItemParts { _toFragment() }
      }

      init(
        id: PocketGraph.ID,
        url: PocketGraph.Url,
        title: String,
        excerpt: String,
        imageUrl: PocketGraph.Url,
        publisher: String,
        target: Target? = nil
      ) {
        self.init(_dataDict: DataDict(
          data: [
            "__typename": PocketGraph.Objects.CorpusItem.typename,
            "id": id,
            "url": url,
            "title": title,
            "excerpt": excerpt,
            "imageUrl": imageUrl,
            "publisher": publisher,
            "target": target._fieldData,
          ],
          fulfilledFragments: [
            ObjectIdentifier(SavedItemSummary.CorpusItem.self),
            ObjectIdentifier(CorpusItemParts.self)
          ]
        ))
      }

      /// CorpusItem.Target
      ///
      /// Parent Type: `CorpusTarget`
      struct Target: PocketGraph.SelectionSet {
        let __data: DataDict
        init(_dataDict: DataDict) { __data = _dataDict }

        static var __parentType: ApolloAPI.ParentType { PocketGraph.Unions.CorpusTarget }

        var asSyndicatedArticle: AsSyndicatedArticle? { _asInlineFragment() }
        var asCollection: AsCollection? { _asInlineFragment() }

        init(
          __typename: String
        ) {
          self.init(_dataDict: DataDict(
            data: [
              "__typename": __typename,
            ],
            fulfilledFragments: [
              ObjectIdentifier(SavedItemSummary.CorpusItem.Target.self)
            ]
          ))
        }

        /// CorpusItem.Target.AsSyndicatedArticle
        ///
        /// Parent Type: `SyndicatedArticle`
        struct AsSyndicatedArticle: PocketGraph.InlineFragment, ApolloAPI.CompositeInlineFragment {
          let __data: DataDict
          init(_dataDict: DataDict) { __data = _dataDict }

          typealias RootEntityType = SavedItemSummary.CorpusItem.Target
          static var __parentType: ApolloAPI.ParentType { PocketGraph.Objects.SyndicatedArticle }
          public static var __mergedSources: [any ApolloAPI.SelectionSet.Type] { [
            SyndicatedArticleParts.self,
            CorpusItemParts.Target.AsSyndicatedArticle.self
          ] }

          /// The item id of this Syndicated Article
          var itemId: PocketGraph.ID? { __data["itemId"] }
          /// Primary image to use in surfacing this content
          var mainImage: String? { __data["mainImage"] }
          /// Title of syndicated article
          var title: String { __data["title"] }
          /// Excerpt 
          var excerpt: String? { __data["excerpt"] }
          /// The manually set publisher information for this article
          var publisher: SyndicatedArticleParts.Publisher? { __data["publisher"] }

          struct Fragments: FragmentContainer {
            let __data: DataDict
            init(_dataDict: DataDict) { __data = _dataDict }

            var syndicatedArticleParts: SyndicatedArticleParts { _toFragment() }
          }

          init(
            itemId: PocketGraph.ID? = nil,
            mainImage: String? = nil,
            title: String,
            excerpt: String? = nil,
            publisher: SyndicatedArticleParts.Publisher? = nil
          ) {
            self.init(_dataDict: DataDict(
              data: [
                "__typename": PocketGraph.Objects.SyndicatedArticle.typename,
                "itemId": itemId,
                "mainImage": mainImage,
                "title": title,
                "excerpt": excerpt,
                "publisher": publisher._fieldData,
              ],
              fulfilledFragments: [
                ObjectIdentifier(SavedItemSummary.CorpusItem.Target.self),
                ObjectIdentifier(SavedItemSummary.CorpusItem.Target.AsSyndicatedArticle.self),
                ObjectIdentifier(SyndicatedArticleParts.self),
                ObjectIdentifier(CorpusItemParts.Target.self),
                ObjectIdentifier(CorpusItemParts.Target.AsSyndicatedArticle.self)
              ]
            ))
          }
        }

        /// CorpusItem.Target.AsCollection
        ///
        /// Parent Type: `Collection`
        struct AsCollection: PocketGraph.InlineFragment, ApolloAPI.CompositeInlineFragment {
          let __data: DataDict
          init(_dataDict: DataDict) { __data = _dataDict }

          typealias RootEntityType = SavedItemSummary.CorpusItem.Target
          static var __parentType: ApolloAPI.ParentType { PocketGraph.Objects.Collection }
          public static var __mergedSources: [any ApolloAPI.SelectionSet.Type] { [
            CollectionSummary.self,
            CorpusItemParts.Target.AsCollection.self
          ] }

          var slug: String { __data["slug"] }
          var authors: [Author] { __data["authors"] }

          struct Fragments: FragmentContainer {
            let __data: DataDict
            init(_dataDict: DataDict) { __data = _dataDict }

            var collectionSummary: CollectionSummary { _toFragment() }
          }

          init(
            slug: String,
            authors: [Author]
          ) {
            self.init(_dataDict: DataDict(
              data: [
                "__typename": PocketGraph.Objects.Collection.typename,
                "slug": slug,
                "authors": authors._fieldData,
              ],
              fulfilledFragments: [
                ObjectIdentifier(SavedItemSummary.CorpusItem.Target.self),
                ObjectIdentifier(SavedItemSummary.CorpusItem.Target.AsCollection.self),
                ObjectIdentifier(CollectionSummary.self),
                ObjectIdentifier(CorpusItemParts.Target.self),
                ObjectIdentifier(CorpusItemParts.Target.AsCollection.self)
              ]
            ))
          }

          /// CorpusItem.Target.AsCollection.Author
          ///
          /// Parent Type: `CollectionAuthor`
          struct Author: PocketGraph.SelectionSet {
            let __data: DataDict
            init(_dataDict: DataDict) { __data = _dataDict }

            static var __parentType: ApolloAPI.ParentType { PocketGraph.Objects.CollectionAuthor }

            var name: String { __data["name"] }

            struct Fragments: FragmentContainer {
              let __data: DataDict
              init(_dataDict: DataDict) { __data = _dataDict }

              var collectionAuthorSummary: CollectionAuthorSummary { _toFragment() }
            }

            init(
              name: String
            ) {
              self.init(_dataDict: DataDict(
                data: [
                  "__typename": PocketGraph.Objects.CollectionAuthor.typename,
                  "name": name,
                ],
                fulfilledFragments: [
                  ObjectIdentifier(SavedItemSummary.CorpusItem.Target.AsCollection.Author.self),
                  ObjectIdentifier(CollectionAuthorSummary.self),
                  ObjectIdentifier(CollectionSummary.Author.self)
                ]
              ))
            }
          }
        }
      }
    }
  }

}